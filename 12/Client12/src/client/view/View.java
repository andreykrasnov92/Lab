package client.view;

import static client.ClientMain.*;
import client.entities.Gruppa;
import client.entities.Student;
import client.model.Groups;
import client.model.Students;
import java.awt.Color;
import java.awt.EventQueue;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import static shared.util.Utils.*;

public class View extends JFrame {

    private boolean tryingToUpdateLockedEntity = false;

    private View() {
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jResultScrollPane = new javax.swing.JScrollPane();
        jResultTable = new javax.swing.JTable();
        jInsertGroupButton = new javax.swing.JButton();
        jInsertStudentButton = new javax.swing.JButton();
        jSelectGroupUpdLabel = new javax.swing.JLabel();
        jSelectStudentUpdLabel = new javax.swing.JLabel();
        jSelectGroupDelLabel = new javax.swing.JLabel();
        jSelectStudentDelLabel = new javax.swing.JLabel();
        jSelectGroupUpdComboBox = new javax.swing.JComboBox();
        jSelectStudentUpdComboBox = new javax.swing.JComboBox();
        jSelectGroupDelComboBox = new javax.swing.JComboBox();
        jSelectStudentDelComboBox = new javax.swing.JComboBox();
        jUpdateGroupButton = new javax.swing.JButton();
        jUpdateStudentButton = new javax.swing.JButton();
        jDeleteGroupButton = new javax.swing.JButton();
        jDeleteStudentButton = new javax.swing.JButton();
        jCancelGroupUpdatingButton = new javax.swing.JButton();
        jCancelStudentUpdatingButton = new javax.swing.JButton();
        jMessageLabel = new javax.swing.JLabel();
        jCancelGroupDeletingButton = new javax.swing.JButton();
        jCancelStudentDeletingButton = new javax.swing.JButton();
        jCancelGroupInsertingButton = new javax.swing.JButton();
        jCancelStudentInsertingButton = new javax.swing.JButton();
        jViewMenuBar = new javax.swing.JMenuBar();
        jCreateMenu = new javax.swing.JMenu();
        jCreateGroupMenuItem = new javax.swing.JMenuItem();
        jCreateStudentMenuItem = new javax.swing.JMenuItem();
        jReadMenu = new javax.swing.JMenu();
        jReadGroupsMenuItem = new javax.swing.JMenuItem();
        jReadStudentsMenuItem = new javax.swing.JMenuItem();
        jUpdateMenu = new javax.swing.JMenu();
        jUpdateGroupMenuItem = new javax.swing.JMenuItem();
        jUpdateStudentMenuItem = new javax.swing.JMenuItem();
        jDeleteMenu = new javax.swing.JMenu();
        jDeleteGroupMenuItem = new javax.swing.JMenuItem();
        jDeleteStudentMenuItem = new javax.swing.JMenuItem();
        jModelMenu = new javax.swing.JMenu();
        jSerializeModelMenuItem = new javax.swing.JMenuItem();
        jDeserializeModelMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lab12");

        jResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jResultScrollPane.setViewportView(jResultTable);

        jInsertGroupButton.setText("Insert into groups");
        jInsertGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertGroupButtonActionPerformed(evt);
            }
        });

        jInsertStudentButton.setText("Insert into students");
        jInsertStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertStudentButtonActionPerformed(evt);
            }
        });

        jSelectGroupUpdLabel.setText("Select group for updating");

        jSelectStudentUpdLabel.setText("Select student for updating");

        jSelectGroupDelLabel.setText("Select group for deleting");

        jSelectStudentDelLabel.setText("Select student for deleting");

        jSelectGroupUpdComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSelectGroupUpdComboBoxFocusGained(evt);
            }
        });
        jSelectGroupUpdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectGroupUpdComboBoxActionPerformed(evt);
            }
        });

        jSelectStudentUpdComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSelectStudentUpdComboBoxFocusGained(evt);
            }
        });
        jSelectStudentUpdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectStudentUpdComboBoxActionPerformed(evt);
            }
        });

        jSelectGroupDelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectGroupDelComboBoxActionPerformed(evt);
            }
        });

        jSelectStudentDelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectStudentDelComboBoxActionPerformed(evt);
            }
        });

        jUpdateGroupButton.setText("Update group");
        jUpdateGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateGroupButtonActionPerformed(evt);
            }
        });

        jUpdateStudentButton.setText("Update student");
        jUpdateStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateStudentButtonActionPerformed(evt);
            }
        });

        jDeleteGroupButton.setText("Delete group");
        jDeleteGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteGroupButtonActionPerformed(evt);
            }
        });

        jDeleteStudentButton.setText("Delete student");
        jDeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteStudentButtonActionPerformed(evt);
            }
        });

        jCancelGroupUpdatingButton.setText("Cancel");
        jCancelGroupUpdatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelGroupUpdatingButtonActionPerformed(evt);
            }
        });

        jCancelStudentUpdatingButton.setText("Cancel");
        jCancelStudentUpdatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelStudentUpdatingButtonActionPerformed(evt);
            }
        });

        jMessageLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMessageLabel.setText("jLabel1");

        jCancelGroupDeletingButton.setText("Cancel");
        jCancelGroupDeletingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelGroupDeletingButtonActionPerformed(evt);
            }
        });

        jCancelStudentDeletingButton.setText("Cancel");
        jCancelStudentDeletingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelStudentDeletingButtonActionPerformed(evt);
            }
        });

        jCancelGroupInsertingButton.setText("Cancel");
        jCancelGroupInsertingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelGroupInsertingButtonActionPerformed(evt);
            }
        });

        jCancelStudentInsertingButton.setText("Cancel");
        jCancelStudentInsertingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelStudentInsertingButtonActionPerformed(evt);
            }
        });

        jCreateMenu.setText("Create");

        jCreateGroupMenuItem.setText("Group");
        jCreateGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateGroupMenuItemActionPerformed(evt);
            }
        });
        jCreateMenu.add(jCreateGroupMenuItem);

        jCreateStudentMenuItem.setText("Student");
        jCreateStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateStudentMenuItemActionPerformed(evt);
            }
        });
        jCreateMenu.add(jCreateStudentMenuItem);

        jViewMenuBar.add(jCreateMenu);

        jReadMenu.setText("Read");

        jReadGroupsMenuItem.setText("Groups");
        jReadGroupsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadGroupsMenuItemActionPerformed(evt);
            }
        });
        jReadMenu.add(jReadGroupsMenuItem);

        jReadStudentsMenuItem.setText("Students");
        jReadStudentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadStudentsMenuItemActionPerformed(evt);
            }
        });
        jReadMenu.add(jReadStudentsMenuItem);

        jViewMenuBar.add(jReadMenu);

        jUpdateMenu.setText("Update");

        jUpdateGroupMenuItem.setText("Group");
        jUpdateGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateGroupMenuItemActionPerformed(evt);
            }
        });
        jUpdateMenu.add(jUpdateGroupMenuItem);

        jUpdateStudentMenuItem.setText("Student");
        jUpdateStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateStudentMenuItemActionPerformed(evt);
            }
        });
        jUpdateMenu.add(jUpdateStudentMenuItem);

        jViewMenuBar.add(jUpdateMenu);

        jDeleteMenu.setText("Delete");

        jDeleteGroupMenuItem.setText("Group");
        jDeleteGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteGroupMenuItemActionPerformed(evt);
            }
        });
        jDeleteMenu.add(jDeleteGroupMenuItem);

        jDeleteStudentMenuItem.setText("Student");
        jDeleteStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteStudentMenuItemActionPerformed(evt);
            }
        });
        jDeleteMenu.add(jDeleteStudentMenuItem);

        jViewMenuBar.add(jDeleteMenu);

        jModelMenu.setText("Model");

        jSerializeModelMenuItem.setText("Serialize");
        jSerializeModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSerializeModelMenuItemActionPerformed(evt);
            }
        });
        jModelMenu.add(jSerializeModelMenuItem);

        jDeserializeModelMenuItem.setText("Deserialize");
        jDeserializeModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeserializeModelMenuItemActionPerformed(evt);
            }
        });
        jModelMenu.add(jDeserializeModelMenuItem);

        jViewMenuBar.add(jModelMenu);

        setJMenuBar(jViewMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSelectStudentUpdLabel)
                            .addComponent(jSelectGroupDelLabel)
                            .addComponent(jSelectGroupUpdLabel)
                            .addComponent(jSelectStudentDelLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSelectGroupUpdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectStudentUpdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectGroupDelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectStudentDelComboBox, 0, 70, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jUpdateStudentButton)
                            .addComponent(jUpdateGroupButton)
                            .addComponent(jDeleteGroupButton)
                            .addComponent(jDeleteStudentButton))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCancelStudentDeletingButton)
                            .addComponent(jCancelGroupDeletingButton)
                            .addComponent(jCancelGroupUpdatingButton)
                            .addComponent(jCancelStudentUpdatingButton)))
                    .addComponent(jMessageLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInsertGroupButton)
                            .addComponent(jInsertStudentButton))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCancelStudentInsertingButton)
                            .addComponent(jCancelGroupInsertingButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jInsertGroupButton)
                    .addComponent(jCancelGroupInsertingButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jInsertStudentButton)
                    .addComponent(jCancelStudentInsertingButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectGroupUpdLabel)
                    .addComponent(jSelectGroupUpdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUpdateGroupButton)
                    .addComponent(jCancelGroupUpdatingButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectStudentUpdLabel)
                    .addComponent(jSelectStudentUpdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUpdateStudentButton)
                    .addComponent(jCancelStudentUpdatingButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectGroupDelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSelectGroupDelLabel)
                    .addComponent(jDeleteGroupButton)
                    .addComponent(jCancelGroupDeletingButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectStudentDelLabel)
                    .addComponent(jSelectStudentDelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDeleteStudentButton)
                    .addComponent(jCancelStudentDeletingButton))
                .addGap(18, 18, 18)
                .addComponent(jMessageLabel)
                .addGap(0, 47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCreateGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateGroupMenuItemActionPerformed
        clearView(false);
        showGroupsInsertingTable();
        jCancelGroupInsertingButton.setVisible(true);
        jInsertGroupButton.setVisible(true);
    }//GEN-LAST:event_jCreateGroupMenuItemActionPerformed

    private void jCreateStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateStudentMenuItemActionPerformed
        clearView(false);
        showStudentsInsertingTable();
        jCancelStudentInsertingButton.setVisible(true);
        jInsertStudentButton.setVisible(true);
    }//GEN-LAST:event_jCreateStudentMenuItemActionPerformed

    private void jReadGroupsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadGroupsMenuItemActionPerformed
        clearView(true);
        showGroups();
    }//GEN-LAST:event_jReadGroupsMenuItemActionPerformed

    private void jReadStudentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadStudentsMenuItemActionPerformed
        clearView(true);
        showStudents();
    }//GEN-LAST:event_jReadStudentsMenuItemActionPerformed

    private void jUpdateGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateGroupMenuItemActionPerformed
        try {
            int height = readGroupsCount();
            if (height == 0) {
                showInfoMessage(NO_GROUPS);
                return;
            }
            jSelectGroupUpdComboBox.removeAllItems();
            Groups groups = readGroups();
            for (int i = 0; i < height; i++) {
                jSelectGroupUpdComboBox.addItem(groups.getGroups().get(i).getGroupId());
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jUpdateGroupMenuItemActionPerformed

    private void jUpdateStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateStudentMenuItemActionPerformed
        try {
            int height = readStudentsCount();
            if (height == 0) {
                showInfoMessage(NO_STUDENTS);
                return;
            }
            jSelectStudentUpdComboBox.removeAllItems();
            Students students = readStudents();
            for (int i = 0; i < height; i++) {
                jSelectStudentUpdComboBox.addItem(students.getStudents().get(i).getStudentId());
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jUpdateStudentMenuItemActionPerformed

    private void jDeleteGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteGroupMenuItemActionPerformed
        try {
            int height = readGroupsCount();
            if (readGroupsCount() == 0) {
                showInfoMessage(NO_GROUPS);
                return;
            }
            jSelectGroupDelComboBox.removeAllItems();
            Groups groups = readGroups();
            for (int i = 0; i < height; i++) {
                jSelectGroupDelComboBox.addItem(groups.getGroups().get(i).getGroupId());
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jDeleteGroupMenuItemActionPerformed

    private void jDeleteStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteStudentMenuItemActionPerformed
        try {
            int height = readStudentsCount();
            if (readStudentsCount() == 0) {
                showInfoMessage(NO_STUDENTS);
                return;
            }
            jSelectStudentDelComboBox.removeAllItems();
            Students students = readStudents();
            for (int i = 0; i < height; i++) {
                jSelectStudentDelComboBox.addItem(students.getStudents().get(i).getStudentId());
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jDeleteStudentMenuItemActionPerformed

    private void jSerializeModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSerializeModelMenuItemActionPerformed
        clearView(true);
        showFileChooser(false);
    }//GEN-LAST:event_jSerializeModelMenuItemActionPerformed

    private void jDeserializeModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeserializeModelMenuItemActionPerformed
        clearView(true);
        showFileChooser(true);
    }//GEN-LAST:event_jDeserializeModelMenuItemActionPerformed

    private void jInsertGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertGroupButtonActionPerformed
        try {
            String id = jResultTable.getModel().getValueAt(0, 0).toString();
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            int idValue = validateGroupId(id);
            name = validateGroupName(name);
            createGroup(idValue, name);
            clearView(true);
            showInfoMessage("Group is created successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jInsertGroupButtonActionPerformed

    private void jInsertStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertStudentButtonActionPerformed
        try {
            String id = jResultTable.getModel().getValueAt(0, 0).toString();
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            String groupId = jResultTable.getModel().getValueAt(0, 2).toString();
            int idValue = validateStudentId(id);
            name = validateStudentName(name);
            int groupIdValue = validateGroupId(groupId);
            createStudent(idValue, name, groupIdValue);
            clearView(true);
            showInfoMessage("Student is created successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jInsertStudentButtonActionPerformed

    private void jUpdateGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateGroupButtonActionPerformed
        try {
            String id = jResultTable.getModel().getValueAt(0, 0).toString();
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            int idValue = validateGroupId(id);
            name = validateGroupName(name);
            updateGroup(idValue, name);
            clearView(true);
            showInfoMessage("Group is updated successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jUpdateGroupButtonActionPerformed

    private void jUpdateStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateStudentButtonActionPerformed
        try {
            String id = jResultTable.getModel().getValueAt(0, 0).toString();
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            String groupId = jResultTable.getModel().getValueAt(0, 2).toString();
            int idValue = validateStudentId(id);
            name = validateStudentName(name);
            int groupIdValue = validateGroupId(groupId);
            updateStudent(idValue, name, groupIdValue);
            clearView(true);
            showInfoMessage("Student is updated successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jUpdateStudentButtonActionPerformed

    private void jDeleteGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteGroupButtonActionPerformed
        try {
            int id = Integer.parseInt(jResultTable.getModel().getValueAt(0, 0).toString());
            deleteGroup(id);
            clearView(true);
            showInfoMessage("Group is deleted successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jDeleteGroupButtonActionPerformed

    private void jDeleteStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteStudentButtonActionPerformed
        try {
            int id = Integer.parseInt(jResultTable.getModel().getValueAt(0, 0).toString());
            deleteStudent(id);
            clearView(true);
            showInfoMessage("Student is deleted successfully!");
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jDeleteStudentButtonActionPerformed

    private void jSelectGroupUpdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectGroupUpdComboBoxActionPerformed
        if (jSelectGroupUpdComboBox.getSelectedItem() == null) {
            return;
        }
        int width = GROUP_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(GROUP_COLUMNS_NAMES);
        try {
            clearView(false);
            Gruppa group = startGroupUpdating(Integer.parseInt(
                    jSelectGroupUpdComboBox.getSelectedItem().toString()));
            tryingToUpdateLockedEntity = false;
            showGroupsUpdatingTable(group.getGroupId(), group.getGroupName());
            jCancelGroupUpdatingButton.setVisible(true);
            jUpdateGroupButton.setVisible(true);
            jSelectGroupUpdComboBox.setVisible(true);
            jSelectGroupUpdLabel.setVisible(true);
        } catch (Exception ex) {
            tryingToUpdateLockedEntity = true;
            jCancelGroupUpdatingButton.setVisible(true);
            jSelectGroupUpdComboBox.setVisible(true);
            jSelectGroupUpdLabel.setVisible(true);
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jSelectGroupUpdComboBoxActionPerformed

    private void jSelectStudentUpdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectStudentUpdComboBoxActionPerformed
        if (jSelectStudentUpdComboBox.getSelectedItem() == null) {
            return;
        }
        int width = STUDENT_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(STUDENT_COLUMNS_NAMES);
        try {
            clearView(false);
            Student student = startStudentUpdating(Integer.parseInt(
                    jSelectStudentUpdComboBox.getSelectedItem().toString()));
            tryingToUpdateLockedEntity = false;
            showStudentsUpdatingTable(student.getStudentId(), student.getStudentName(), student.getGroupId());
            jCancelStudentUpdatingButton.setVisible(true);
            jUpdateStudentButton.setVisible(true);
            jSelectStudentUpdComboBox.setVisible(true);
            jSelectStudentUpdLabel.setVisible(true);
        } catch (Exception ex) {
            tryingToUpdateLockedEntity = true;
            jCancelStudentUpdatingButton.setVisible(true);
            jSelectStudentUpdComboBox.setVisible(true);
            jSelectStudentUpdLabel.setVisible(true);
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jSelectStudentUpdComboBoxActionPerformed

    private void jSelectGroupDelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectGroupDelComboBoxActionPerformed
        if (jSelectGroupDelComboBox.getSelectedItem() == null) {
            return;
        }
        try {
            clearView(false);
            int width = GROUP_COLUMNS_COUNT;
            DefaultTableModel model = new DefaultTableModel(1, width);
            model.setColumnIdentifiers(GROUP_COLUMNS_NAMES);
            Gruppa group = readGroup(Integer.parseInt(
                    jSelectGroupDelComboBox.getSelectedItem().toString()));
            showGroupsDeletingTable(group.getGroupId(), group.getGroupName());
            jCancelGroupDeletingButton.setVisible(true);
            jDeleteGroupButton.setVisible(true);
            jSelectGroupDelComboBox.setVisible(true);
            jSelectGroupDelLabel.setVisible(true);
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jSelectGroupDelComboBoxActionPerformed

    private void jSelectStudentDelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectStudentDelComboBoxActionPerformed
        if (jSelectStudentDelComboBox.getSelectedItem() == null) {
            return;
        }
        try {
            clearView(false);
            int width = STUDENT_COLUMNS_COUNT;
            DefaultTableModel model = new DefaultTableModel(1, width);
            model.setColumnIdentifiers(STUDENT_COLUMNS_NAMES);
            Student student = readStudent(Integer.parseInt(
                    jSelectStudentDelComboBox.getSelectedItem().toString()));
            showStudentsDeletingTable(student.getStudentId(), student.getStudentName(), student.getGroupId());
            jCancelStudentDeletingButton.setVisible(true);
            jDeleteStudentButton.setVisible(true);
            jSelectStudentDelComboBox.setVisible(true);
            jSelectStudentDelLabel.setVisible(true);
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }//GEN-LAST:event_jSelectStudentDelComboBoxActionPerformed

    private void jCancelGroupUpdatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelGroupUpdatingButtonActionPerformed
        clearView(true);
        if (jSelectGroupUpdComboBox.getSelectedItem() == null) {
            return;
        }
        if (!tryingToUpdateLockedEntity) {
            try {
                cancelGroupUpdating(Integer.parseInt(
                        jSelectGroupUpdComboBox.getSelectedItem().toString()));
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_jCancelGroupUpdatingButtonActionPerformed

    private void jCancelStudentUpdatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelStudentUpdatingButtonActionPerformed
        clearView(true);
        if (jSelectStudentUpdComboBox.getSelectedItem() == null) {
            return;
        }
        if (!tryingToUpdateLockedEntity) {
            try {
                cancelStudentUpdating(Integer.parseInt(
                        jSelectStudentUpdComboBox.getSelectedItem().toString()));
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_jCancelStudentUpdatingButtonActionPerformed

    private void jCancelGroupDeletingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelGroupDeletingButtonActionPerformed
        clearView(true);
    }//GEN-LAST:event_jCancelGroupDeletingButtonActionPerformed

    private void jCancelStudentDeletingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelStudentDeletingButtonActionPerformed
        clearView(true);
    }//GEN-LAST:event_jCancelStudentDeletingButtonActionPerformed

    private void jCancelGroupInsertingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelGroupInsertingButtonActionPerformed
        clearView(true);
    }//GEN-LAST:event_jCancelGroupInsertingButtonActionPerformed

    private void jCancelStudentInsertingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelStudentInsertingButtonActionPerformed
        clearView(true);
    }//GEN-LAST:event_jCancelStudentInsertingButtonActionPerformed

    private void jSelectGroupUpdComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSelectGroupUpdComboBoxFocusGained
        if (jSelectGroupUpdComboBox.getSelectedItem() == null) {
            return;
        }
        try {
            cancelGroupUpdating(Integer.parseInt(
                    jSelectGroupUpdComboBox.getSelectedItem().toString()));
        } catch (Exception ex) {
            tryingToUpdateLockedEntity = false;
        }
    }//GEN-LAST:event_jSelectGroupUpdComboBoxFocusGained

    private void jSelectStudentUpdComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSelectStudentUpdComboBoxFocusGained
        if (jSelectStudentUpdComboBox.getSelectedItem() == null) {
            return;
        }
        try {
            cancelStudentUpdating(Integer.parseInt(
                    jSelectStudentUpdComboBox.getSelectedItem().toString()));
        } catch (Exception ex) {
            tryingToUpdateLockedEntity = false;
        }
    }//GEN-LAST:event_jSelectStudentUpdComboBoxFocusGained

    private void postInitComponents() {
        setUnvisible();
    }

    private void setUnvisible() {
        jMessageLabel.setVisible(false);
        jCancelStudentDeletingButton.setVisible(false);
        jDeleteStudentButton.setVisible(false);
        jSelectStudentDelComboBox.setVisible(false);
        jSelectStudentDelLabel.setVisible(false);
        jCancelGroupDeletingButton.setVisible(false);
        jDeleteGroupButton.setVisible(false);
        jSelectGroupDelComboBox.setVisible(false);
        jSelectGroupDelLabel.setVisible(false);
        jCancelStudentUpdatingButton.setVisible(false);
        jUpdateStudentButton.setVisible(false);
        jSelectStudentUpdComboBox.setVisible(false);
        jSelectStudentUpdLabel.setVisible(false);
        jCancelGroupUpdatingButton.setVisible(false);
        jUpdateGroupButton.setVisible(false);
        jSelectGroupUpdComboBox.setVisible(false);
        jSelectGroupUpdLabel.setVisible(false);
        jCancelStudentInsertingButton.setVisible(false);
        jInsertStudentButton.setVisible(false);
        jCancelGroupInsertingButton.setVisible(false);
        jInsertGroupButton.setVisible(false);
        jResultTable.setVisible(false);
    }

    private void showGroups() {
        try {
            Groups groups = readGroups();
            int height = groups.getGroups().size();
            if (height == 0) {
                showInfoMessage(NO_GROUPS);
                return;
            }
            showTable(height, GROUP_COLUMNS_COUNT, GROUP_COLUMNS_NAMES, false);
            for (int i = 0; i < height; i++) {
                jResultTable.getModel().setValueAt(groups.getGroups().get(i).getGroupId(), i, 0);
                jResultTable.getModel().setValueAt(groups.getGroups().get(i).getGroupName(), i, 1);
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }

    private void showGroupsInsertingTable() {
        showGroupsTable(true);
    }

    private void showGroupsUpdatingTable(int groupId, String groupName) {
        showGroupsTable(true);
        jResultTable.getModel().setValueAt(groupId, 0, 0);
        jResultTable.getModel().setValueAt(groupName, 0, 1);
    }

    private void showGroupsDeletingTable(int groupId, String groupName) {
        showGroupsTable(false);
        jResultTable.getModel().setValueAt(groupId, 0, 0);
        jResultTable.getModel().setValueAt(groupName, 0, 1);
    }

    private void showGroupsTable(boolean tableEnabled) {
        showTable(1, GROUP_COLUMNS_COUNT, GROUP_COLUMNS_NAMES, tableEnabled);
    }

    private void showStudents() {
        try {
            Students students = readStudents();
            int height = students.getStudents().size();
            if (height == 0) {
                showInfoMessage(NO_STUDENTS);
                return;
            }
            showTable(height, STUDENT_COLUMNS_COUNT, STUDENT_COLUMNS_NAMES, false);
            for (int i = 0; i < height; i++) {
                jResultTable.getModel().setValueAt(students.getStudents().get(i).getStudentId(), i, 0);
                jResultTable.getModel().setValueAt(students.getStudents().get(i).getStudentName(), i, 1);
                jResultTable.getModel().setValueAt(students.getStudents().get(i).getGroupId(), i, 2);
            }
        } catch (Exception ex) {
            showWarningMessage(ex.getMessage());
        }
    }

    private void showStudentsInsertingTable() {
        showStudentsTable(true);
    }

    private void showStudentsUpdatingTable(int studentId, String studentName, int groupId) {
        showStudentsTable(true);
        jResultTable.getModel().setValueAt(studentId, 0, 0);
        jResultTable.getModel().setValueAt(studentName, 0, 1);
        jResultTable.getModel().setValueAt(groupId, 0, 2);
    }

    private void showStudentsDeletingTable(int studentId, String studentName, int groupId) {
        showStudentsTable(false);
        jResultTable.getModel().setValueAt(studentId, 0, 0);
        jResultTable.getModel().setValueAt(studentName, 0, 1);
        jResultTable.getModel().setValueAt(groupId, 0, 2);
    }

    private void showStudentsTable(boolean tableEnabled) {
        showTable(1, STUDENT_COLUMNS_COUNT, STUDENT_COLUMNS_NAMES, tableEnabled);
    }

    private void showTable(int height, int width, String[] headers, boolean tableEnabled) {
        DefaultTableModel model = new DefaultTableModel(height, width);
        model.setColumnIdentifiers(headers);
        jResultTable.setModel(model);
        jResultTable.setEnabled(tableEnabled);
        jResultTable.setVisible(true);
    }

    private void showFileChooser(boolean isOpenFile) {
        JFileChooser chooser = new JFileChooser();
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.addChoosableFileFilter(new BinaryFilter());
        int option = isOpenFile ? chooser.showOpenDialog(View.this) : chooser.showSaveDialog(View.this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File sf = chooser.getSelectedFile();
            if (sf != null) {
                String filepath = sf.getPath();
                if (chooser.getFileFilter().accept(sf)) {
                    if (isOpenFile) {
                        try {
                            deserializeModel(filepath);
                            showInfoMessage("Model deserialized successfully!");
                        } catch (Exception ex) {
                            showWarningMessage(ex.getMessage());
                        }
                    } else {
                        try {
                            serializeModel(filepath);
                            showInfoMessage("Model serialized successfully!");
                        } catch (Exception ex) {
                            showWarningMessage(ex.getMessage());
                        }
                    }
                }
            }
        }
    }

    public static View runView() {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException |
                InstantiationException | UnsupportedLookAndFeelException ex) {
        }
        View view = new View();
        EventQueue.invokeLater(() -> {
            view.setVisible(true);
        });
        return view;
    }

    @Override
    public void dispose() {
        releaseBlocks();
        super.dispose();
    }

    public void showInfoMessage(String message) {
        releaseBlocks();
        clearView(true);
        showMessage(message, Color.BLUE);
    }

    public void showWarningMessage(String message) {
        showMessage(message, Color.RED);
    }

    private void showMessage(String message, Color color) {
        jMessageLabel.setForeground(color);
        jMessageLabel.setText(message);
        jMessageLabel.setVisible(true);
    }

    private void clearView(boolean menuesEnabled) {
        setUnvisible();
        setMenuesEnabled(menuesEnabled);
    }

    public void setMenuesEnabled(boolean flag) {
        jCreateMenu.setEnabled(flag);
        jUpdateMenu.setEnabled(flag);
        jDeleteMenu.setEnabled(flag);
        jReadMenu.setEnabled(flag);
        jModelMenu.setEnabled(flag);
    }

    public void releaseBlocks() {
        if (!tryingToUpdateLockedEntity) {
            try {
                cancelGroupUpdating(Integer.parseInt(
                        jSelectGroupUpdComboBox.getSelectedItem().toString()));
            } catch (Exception ex) {
            }
            try {
                cancelStudentUpdating(Integer.parseInt(
                        jSelectStudentUpdComboBox.getSelectedItem().toString()));
            } catch (Exception ex) {
            }
        }
    }

    private class BinaryFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".bin");
        }

        @Override
        public String getDescription() {
            return "*.bin";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jCancelGroupDeletingButton;
    private javax.swing.JButton jCancelGroupInsertingButton;
    private javax.swing.JButton jCancelGroupUpdatingButton;
    private javax.swing.JButton jCancelStudentDeletingButton;
    private javax.swing.JButton jCancelStudentInsertingButton;
    private javax.swing.JButton jCancelStudentUpdatingButton;
    private javax.swing.JMenuItem jCreateGroupMenuItem;
    private javax.swing.JMenu jCreateMenu;
    private javax.swing.JMenuItem jCreateStudentMenuItem;
    private javax.swing.JButton jDeleteGroupButton;
    private javax.swing.JMenuItem jDeleteGroupMenuItem;
    private javax.swing.JMenu jDeleteMenu;
    private javax.swing.JButton jDeleteStudentButton;
    private javax.swing.JMenuItem jDeleteStudentMenuItem;
    private javax.swing.JMenuItem jDeserializeModelMenuItem;
    private javax.swing.JButton jInsertGroupButton;
    private javax.swing.JButton jInsertStudentButton;
    private javax.swing.JLabel jMessageLabel;
    private javax.swing.JMenu jModelMenu;
    private javax.swing.JMenuItem jReadGroupsMenuItem;
    private javax.swing.JMenu jReadMenu;
    private javax.swing.JMenuItem jReadStudentsMenuItem;
    private javax.swing.JScrollPane jResultScrollPane;
    private javax.swing.JTable jResultTable;
    private javax.swing.JComboBox jSelectGroupDelComboBox;
    private javax.swing.JLabel jSelectGroupDelLabel;
    private javax.swing.JComboBox jSelectGroupUpdComboBox;
    private javax.swing.JLabel jSelectGroupUpdLabel;
    private javax.swing.JComboBox jSelectStudentDelComboBox;
    private javax.swing.JLabel jSelectStudentDelLabel;
    private javax.swing.JComboBox jSelectStudentUpdComboBox;
    private javax.swing.JLabel jSelectStudentUpdLabel;
    private javax.swing.JMenuItem jSerializeModelMenuItem;
    private javax.swing.JButton jUpdateGroupButton;
    private javax.swing.JMenuItem jUpdateGroupMenuItem;
    private javax.swing.JMenu jUpdateMenu;
    private javax.swing.JButton jUpdateStudentButton;
    private javax.swing.JMenuItem jUpdateStudentMenuItem;
    private javax.swing.JMenuBar jViewMenuBar;
    // End of variables declaration//GEN-END:variables
}

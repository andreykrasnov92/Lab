package view;

import controller.Controller;
import controller.exceptions.IllegalOrphanException;
import controller.exceptions.NonexistentEntityException;
import controller.exceptions.PreexistingEntityException;
import entities.Group;
import entities.Student;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

import static utilities.Util.*;

public class View extends JFrame {

    private final Controller controller;

    public View() {
        controller = Controller.getInstance();
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jResultScrollPane = new javax.swing.JScrollPane();
        jResultTable = new javax.swing.JTable();
        jInsertGroupButton = new javax.swing.JButton();
        jInsertStudentButton = new javax.swing.JButton();
        jSelectGroupUpdLabel = new javax.swing.JLabel();
        jSelectStudentUpdLabel = new javax.swing.JLabel();
        jSelectGroupDelLabel = new javax.swing.JLabel();
        jSelectStudentDelLabel = new javax.swing.JLabel();
        jSelectGroupUpdComboBox = new javax.swing.JComboBox();
        jSelectStudentUpdComboBox = new javax.swing.JComboBox();
        jSelectGroupDelComboBox = new javax.swing.JComboBox();
        jSelectStudentDelComboBox = new javax.swing.JComboBox();
        jUpdateGroupButton = new javax.swing.JButton();
        jUpdateStudentButton = new javax.swing.JButton();
        jDeleteGroupButton = new javax.swing.JButton();
        jDeleteStudentButton = new javax.swing.JButton();
        jViewMenuBar = new javax.swing.JMenuBar();
        jCreateMenu = new javax.swing.JMenu();
        jCreateGroupMenuItem = new javax.swing.JMenuItem();
        jCreateStudentMenuItem = new javax.swing.JMenuItem();
        jReadMenu = new javax.swing.JMenu();
        jReadGroupsMenuItem = new javax.swing.JMenuItem();
        jReadStudentsMenuItem = new javax.swing.JMenuItem();
        jUpdateMenu = new javax.swing.JMenu();
        jUpdateGroupMenuItem = new javax.swing.JMenuItem();
        jUpdateStudentMenuItem = new javax.swing.JMenuItem();
        jDeleteMenu = new javax.swing.JMenu();
        jDeleteGroupMenuItem = new javax.swing.JMenuItem();
        jDeleteStudentMenuItem = new javax.swing.JMenuItem();
        jModelMenu = new javax.swing.JMenu();
        jSerializeModelMenuItem = new javax.swing.JMenuItem();
        jDeserializeModelMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab2 (Desktop)");

        jResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jResultScrollPane.setViewportView(jResultTable);

        jInsertGroupButton.setText("Insert into groups");
        jInsertGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertGroupButtonActionPerformed(evt);
            }
        });

        jInsertStudentButton.setText("Insert into students");
        jInsertStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInsertStudentButtonActionPerformed(evt);
            }
        });

        jSelectGroupUpdLabel.setText("Select group for updating");

        jSelectStudentUpdLabel.setText("Select student for updating");

        jSelectGroupDelLabel.setText("Select group for deleting");

        jSelectStudentDelLabel.setText("Select student for deleting");

        jSelectGroupUpdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectGroupUpdComboBoxActionPerformed(evt);
            }
        });

        jSelectStudentUpdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectStudentUpdComboBoxActionPerformed(evt);
            }
        });

        jSelectGroupDelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectGroupDelComboBoxActionPerformed(evt);
            }
        });

        jSelectStudentDelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectStudentDelComboBoxActionPerformed(evt);
            }
        });

        jUpdateGroupButton.setText("Update group");
        jUpdateGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateGroupButtonActionPerformed(evt);
            }
        });

        jUpdateStudentButton.setText("Update student");
        jUpdateStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateStudentButtonActionPerformed(evt);
            }
        });

        jDeleteGroupButton.setText("Delete group");
        jDeleteGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteGroupButtonActionPerformed(evt);
            }
        });

        jDeleteStudentButton.setText("Delete student");
        jDeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteStudentButtonActionPerformed(evt);
            }
        });

        jCreateMenu.setText("Create");

        jCreateGroupMenuItem.setText("Group");
        jCreateGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateGroupMenuItemActionPerformed(evt);
            }
        });
        jCreateMenu.add(jCreateGroupMenuItem);

        jCreateStudentMenuItem.setText("Student");
        jCreateStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateStudentMenuItemActionPerformed(evt);
            }
        });
        jCreateMenu.add(jCreateStudentMenuItem);

        jViewMenuBar.add(jCreateMenu);

        jReadMenu.setText("Read");

        jReadGroupsMenuItem.setText("Groups");
        jReadGroupsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadGroupsMenuItemActionPerformed(evt);
            }
        });
        jReadMenu.add(jReadGroupsMenuItem);

        jReadStudentsMenuItem.setText("Students");
        jReadStudentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadStudentsMenuItemActionPerformed(evt);
            }
        });
        jReadMenu.add(jReadStudentsMenuItem);

        jViewMenuBar.add(jReadMenu);

        jUpdateMenu.setText("Update");

        jUpdateGroupMenuItem.setText("Group");
        jUpdateGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateGroupMenuItemActionPerformed(evt);
            }
        });
        jUpdateMenu.add(jUpdateGroupMenuItem);

        jUpdateStudentMenuItem.setText("Student");
        jUpdateStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateStudentMenuItemActionPerformed(evt);
            }
        });
        jUpdateMenu.add(jUpdateStudentMenuItem);

        jViewMenuBar.add(jUpdateMenu);

        jDeleteMenu.setText("Delete");

        jDeleteGroupMenuItem.setText("Group");
        jDeleteGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteGroupMenuItemActionPerformed(evt);
            }
        });
        jDeleteMenu.add(jDeleteGroupMenuItem);

        jDeleteStudentMenuItem.setText("Student");
        jDeleteStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteStudentMenuItemActionPerformed(evt);
            }
        });
        jDeleteMenu.add(jDeleteStudentMenuItem);

        jViewMenuBar.add(jDeleteMenu);

        jModelMenu.setText("Model");

        jSerializeModelMenuItem.setText("Serialize");
        jSerializeModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSerializeModelMenuItemActionPerformed(evt);
            }
        });
        jModelMenu.add(jSerializeModelMenuItem);

        jDeserializeModelMenuItem.setText("Deserialize");
        jDeserializeModelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeserializeModelMenuItemActionPerformed(evt);
            }
        });
        jModelMenu.add(jDeserializeModelMenuItem);

        jViewMenuBar.add(jModelMenu);

        setJMenuBar(jViewMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jInsertGroupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jInsertStudentButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSelectStudentUpdLabel)
                            .addComponent(jSelectGroupDelLabel)
                            .addComponent(jSelectGroupUpdLabel)
                            .addComponent(jSelectStudentDelLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSelectGroupUpdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectStudentUpdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectGroupDelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSelectStudentDelComboBox, 0, 70, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDeleteStudentButton)
                            .addComponent(jDeleteGroupButton)
                            .addComponent(jUpdateStudentButton)
                            .addComponent(jUpdateGroupButton))))
                .addContainerGap(314, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jInsertGroupButton)
                    .addComponent(jInsertStudentButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectGroupUpdLabel)
                    .addComponent(jSelectGroupUpdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUpdateGroupButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectStudentUpdLabel)
                    .addComponent(jSelectStudentUpdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUpdateStudentButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectGroupDelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSelectGroupDelLabel)
                    .addComponent(jDeleteGroupButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSelectStudentDelLabel)
                    .addComponent(jSelectStudentDelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDeleteStudentButton))
                .addGap(0, 121, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCreateGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateGroupMenuItemActionPerformed
        showGroupsInsertTable();
        jInsertGroupButton.setVisible(true);
    }//GEN-LAST:event_jCreateGroupMenuItemActionPerformed

    private void jCreateStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateStudentMenuItemActionPerformed
        showStudentsInsertTable();
        jInsertStudentButton.setVisible(true);
    }//GEN-LAST:event_jCreateStudentMenuItemActionPerformed

    private void jReadGroupsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadGroupsMenuItemActionPerformed
        showGroups();
    }//GEN-LAST:event_jReadGroupsMenuItemActionPerformed

    private void jReadStudentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadStudentsMenuItemActionPerformed
        showStudents();
    }//GEN-LAST:event_jReadStudentsMenuItemActionPerformed

    private void jUpdateGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateGroupMenuItemActionPerformed
        int height = controller.readGroupsCount();
        if (height == 0) {
            showWarningDialog(Controller.NO_GROUPS);
            return;
        }
        setUnvisible();
        jSelectGroupUpdComboBox.removeAllItems();
        ArrayList<Group> groups = controller.readGroups();
        for (int i = 0; i < height; i++) {
            jSelectGroupUpdComboBox.addItem(groups.get(i).getGroupId());
        }
        jUpdateGroupButton.setVisible(true);
        jSelectGroupUpdComboBox.setVisible(true);
        jSelectGroupUpdLabel.setVisible(true);
        jResultTable.setVisible(true);
    }//GEN-LAST:event_jUpdateGroupMenuItemActionPerformed

    private void jUpdateStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateStudentMenuItemActionPerformed
        int height = controller.readStudentsCount();
        if (height == 0) {
            showWarningDialog(Controller.NO_STUDENTS);
            return;
        }
        setUnvisible();
        jSelectStudentUpdComboBox.removeAllItems();
        ArrayList<Student> students = controller.readStudents();
        for (int i = 0; i < height; i++) {
            jSelectStudentUpdComboBox.addItem(students.get(i).getStudentId());
        }
        jUpdateStudentButton.setVisible(true);
        jSelectStudentUpdComboBox.setVisible(true);
        jSelectStudentUpdLabel.setVisible(true);
        jResultTable.setVisible(true);
    }//GEN-LAST:event_jUpdateStudentMenuItemActionPerformed

    private void jDeleteGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteGroupMenuItemActionPerformed
        int height = controller.readGroupsCount();
        if (controller.readGroupsCount() == 0) {
            showWarningDialog(Controller.NO_GROUPS);
            return;
        }
        setUnvisible();
        jSelectGroupDelComboBox.removeAllItems();
        ArrayList<Group> groups = controller.readGroups();
        for (int i = 0; i < height; i++) {
            jSelectGroupDelComboBox.addItem(groups.get(i).getGroupId());
        }
        jDeleteGroupButton.setVisible(true);
        jSelectGroupDelComboBox.setVisible(true);
        jSelectGroupDelLabel.setVisible(true);
        jResultTable.setVisible(true);
    }//GEN-LAST:event_jDeleteGroupMenuItemActionPerformed

    private void jDeleteStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteStudentMenuItemActionPerformed
        int height = controller.readStudentsCount();
        if (controller.readStudentsCount() == 0) {
            showWarningDialog(Controller.NO_STUDENTS);
            return;
        }
        setUnvisible();
        jSelectStudentDelComboBox.removeAllItems();
        ArrayList<Student> students = controller.readStudents();
        for (int i = 0; i < height; i++) {
            jSelectStudentDelComboBox.addItem(students.get(i).getStudentId());
        }
        jDeleteStudentButton.setVisible(true);
        jSelectStudentDelComboBox.setVisible(true);
        jSelectStudentDelLabel.setVisible(true);
        jResultTable.setVisible(true);
    }//GEN-LAST:event_jDeleteStudentMenuItemActionPerformed

    private void jSerializeModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSerializeModelMenuItemActionPerformed
        showFileChooser(false);
    }//GEN-LAST:event_jSerializeModelMenuItemActionPerformed

    private void jDeserializeModelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeserializeModelMenuItemActionPerformed
        showFileChooser(true);
    }//GEN-LAST:event_jDeserializeModelMenuItemActionPerformed

    private void jInsertGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertGroupButtonActionPerformed
        jInsertGroupButton.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            controller.createGroup(id, name);
        } catch (NullPointerException | NumberFormatException |
                PreexistingEntityException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jInsertGroupButtonActionPerformed

    private void jInsertStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInsertStudentButtonActionPerformed
        jInsertStudentButton.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            int groupId = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 2).toString());
            controller.createStudent(id, name, groupId);
        } catch (NonexistentEntityException | NullPointerException |
                NumberFormatException | PreexistingEntityException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jInsertStudentButtonActionPerformed

    private void jUpdateGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateGroupButtonActionPerformed
        jUpdateGroupButton.setVisible(false);
        jSelectGroupUpdComboBox.setVisible(false);
        jSelectGroupUpdLabel.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            controller.updateGroup(id, name);
        } catch (NonexistentEntityException | NullPointerException |
                NumberFormatException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jUpdateGroupButtonActionPerformed

    private void jUpdateStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateStudentButtonActionPerformed
        jUpdateStudentButton.setVisible(false);
        jSelectStudentUpdComboBox.setVisible(false);
        jSelectStudentUpdLabel.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            String name = jResultTable.getModel().getValueAt(0, 1).toString();
            int groupId = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 2).toString());
            controller.updateStudent(id, name, groupId);
        } catch (NonexistentEntityException | NullPointerException |
                NumberFormatException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jUpdateStudentButtonActionPerformed

    private void jDeleteGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteGroupButtonActionPerformed
        jDeleteGroupButton.setVisible(false);
        jSelectGroupDelComboBox.setVisible(false);
        jSelectGroupDelLabel.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            controller.deleteGroup(id);
        } catch (IllegalOrphanException | NonexistentEntityException |
                NullPointerException | NumberFormatException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jDeleteGroupButtonActionPerformed

    private void jDeleteStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteStudentButtonActionPerformed
        jDeleteStudentButton.setVisible(false);
        jSelectStudentDelComboBox.setVisible(false);
        jSelectStudentDelLabel.setVisible(false);
        jResultTable.setVisible(false);
        try {
            int id = Integer.parseInt(
                    jResultTable.getModel().getValueAt(0, 0).toString());
            controller.deleteStudent(id);
        } catch (NonexistentEntityException | NullPointerException |
                NumberFormatException ex) {
            showWarningDialog(printException(ex));
        }
    }//GEN-LAST:event_jDeleteStudentButtonActionPerformed

    private void jSelectGroupUpdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectGroupUpdComboBoxActionPerformed
        if (jSelectGroupUpdComboBox.getSelectedItem() == null) {
            return;
        }
        int width = Controller.GROUP_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.GROUP_COLUMNS_NAMES);
        Group group = controller.readGroup(Integer.parseInt(
                jSelectGroupUpdComboBox.getSelectedItem().toString()));
        model.setValueAt(group.getGroupId(), 0, 0);
        model.setValueAt(group.getGroupName(), 0, 1);
        jResultTable.setModel(model);
    }//GEN-LAST:event_jSelectGroupUpdComboBoxActionPerformed

    private void jSelectStudentUpdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectStudentUpdComboBoxActionPerformed
        if (jSelectStudentUpdComboBox.getSelectedItem() == null) {
            return;
        }
        int width = Controller.STUDENT_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.STUDENT_COLUMNS_NAMES);
        Student student = controller.readStudent(Integer.parseInt(
                jSelectStudentUpdComboBox.getSelectedItem().toString()));
        model.setValueAt(student.getStudentId(), 0, 0);
        model.setValueAt(student.getStudentName(), 0, 1);
        model.setValueAt(student.getGroup().getGroupId(), 0, 2);
        jResultTable.setModel(model);
    }//GEN-LAST:event_jSelectStudentUpdComboBoxActionPerformed

    private void jSelectGroupDelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectGroupDelComboBoxActionPerformed
        if (jSelectGroupDelComboBox.getSelectedItem() == null) {
            return;
        }
        int width = Controller.GROUP_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.GROUP_COLUMNS_NAMES);
        Group group = controller.readGroup(Integer.parseInt(
                jSelectGroupDelComboBox.getSelectedItem().toString()));
        model.setValueAt(group.getGroupId(), 0, 0);
        model.setValueAt(group.getGroupName(), 0, 1);
        jResultTable.setModel(model);
    }//GEN-LAST:event_jSelectGroupDelComboBoxActionPerformed

    private void jSelectStudentDelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectStudentDelComboBoxActionPerformed
        if (jSelectStudentDelComboBox.getSelectedItem() == null) {
            return;
        }
        int width = Controller.STUDENT_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.STUDENT_COLUMNS_NAMES);
        Student student = controller.readStudent(Integer.parseInt(
                jSelectStudentDelComboBox.getSelectedItem().toString()));
        model.setValueAt(student.getStudentId(), 0, 0);
        model.setValueAt(student.getStudentName(), 0, 1);
        model.setValueAt(student.getGroup().getGroupId(), 0, 2);
        jResultTable.setModel(model);
    }//GEN-LAST:event_jSelectStudentDelComboBoxActionPerformed

    private void postInitComponents() {
        setUnvisible();
    }

    private void setUnvisible() {
        jDeleteStudentButton.setVisible(false);
        jSelectStudentDelComboBox.setVisible(false);
        jSelectStudentDelLabel.setVisible(false);
        jDeleteGroupButton.setVisible(false);
        jSelectGroupDelComboBox.setVisible(false);
        jSelectGroupDelLabel.setVisible(false);
        jUpdateStudentButton.setVisible(false);
        jSelectStudentUpdComboBox.setVisible(false);
        jSelectStudentUpdLabel.setVisible(false);
        jUpdateGroupButton.setVisible(false);
        jSelectGroupUpdComboBox.setVisible(false);
        jSelectGroupUpdLabel.setVisible(false);
        jInsertStudentButton.setVisible(false);
        jInsertGroupButton.setVisible(false);
        jResultTable.setVisible(false);
    }

    private void showGroups() {
        setUnvisible();
        int height = controller.readGroupsCount();
        int width = Controller.GROUP_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(height, width);
        model.setColumnIdentifiers(Controller.GROUP_COLUMNS_NAMES);
        ArrayList<Group> groups = controller.readGroups();
        for (int i = 0; i < height; i++) {
            model.setValueAt(groups.get(i).getGroupId(), i, 0);
            model.setValueAt(groups.get(i).getGroupName(), i, 1);
        }
        jResultTable.setModel(model);
        jResultTable.setVisible(true);
    }

    private void showGroupsInsertTable() {
        setUnvisible();
        int width = Controller.GROUP_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.GROUP_COLUMNS_NAMES);
        jResultTable.setModel(model);
        jResultTable.setVisible(true);
    }

    private void showStudents() {
        setUnvisible();
        int height = controller.readStudentsCount();
        int width = Controller.STUDENT_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(height, width);
        model.setColumnIdentifiers(Controller.STUDENT_COLUMNS_NAMES);
        ArrayList<Student> students = controller.readStudents();
        for (int i = 0; i < height; i++) {
            model.setValueAt(students.get(i).getStudentId(), i, 0);
            model.setValueAt(students.get(i).getStudentName(), i, 1);
            model.setValueAt(students.get(i).getGroup().getGroupId(), i, 2);
        }
        jResultTable.setModel(model);
        jResultTable.setVisible(true);
    }

    private void showStudentsInsertTable() {
        setUnvisible();
        int width = Controller.STUDENT_COLUMNS_COUNT;
        DefaultTableModel model = new DefaultTableModel(1, width);
        model.setColumnIdentifiers(Controller.STUDENT_COLUMNS_NAMES);
        jResultTable.setModel(model);
        jResultTable.setVisible(true);
    }

    private void showFileChooser(boolean isOpenFile) {
        JFileChooser chooser = new JFileChooser();
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.addChoosableFileFilter(new BinaryFilter());
        int option = isOpenFile ? chooser.showOpenDialog(View.this)
                : chooser.showSaveDialog(View.this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File sf = chooser.getSelectedFile();
            if (sf != null) {
                String filepath = sf.getPath();
                if (chooser.getFileFilter().accept(sf)) {
                    if (isOpenFile) {
                        try {
                            controller.deserializeModel(filepath);
                        } catch (ClassNotFoundException | IOException ex) {
                            showWarningDialog(printException(ex));
                        }
                    } else {
                        try {
                            controller.serializeModel(filepath);
                        } catch (IOException ex) {
                            showWarningDialog(printException(ex));
                        }
                    }
                }
            }
        }
    }

    private void showWarningDialog(String message) {
        WarningDialog dialog = new WarningDialog();
        dialog.displayDialog(message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(() -> {
            new View().setVisible(true);
        });
    }

    private class WarningDialog extends JDialog {

        private JLabel alertLabel;

        public void displayDialog(String message) {
            alertLabel = new JLabel(message, JLabel.CENTER);
            JPanel contentPane = new JPanel();
            contentPane.add(alertLabel);
            setContentPane(contentPane);
            pack();
            setVisible(true);
        }
    }

    private class BinaryFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".bin");
        }

        @Override
        public String getDescription() {
            return "*.bin";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jCreateGroupMenuItem;
    private javax.swing.JMenu jCreateMenu;
    private javax.swing.JMenuItem jCreateStudentMenuItem;
    private javax.swing.JButton jDeleteGroupButton;
    private javax.swing.JMenuItem jDeleteGroupMenuItem;
    private javax.swing.JMenu jDeleteMenu;
    private javax.swing.JButton jDeleteStudentButton;
    private javax.swing.JMenuItem jDeleteStudentMenuItem;
    private javax.swing.JMenuItem jDeserializeModelMenuItem;
    private javax.swing.JButton jInsertGroupButton;
    private javax.swing.JButton jInsertStudentButton;
    private javax.swing.JMenu jModelMenu;
    private javax.swing.JMenuItem jReadGroupsMenuItem;
    private javax.swing.JMenu jReadMenu;
    private javax.swing.JMenuItem jReadStudentsMenuItem;
    private javax.swing.JScrollPane jResultScrollPane;
    private javax.swing.JTable jResultTable;
    private javax.swing.JComboBox jSelectGroupDelComboBox;
    private javax.swing.JLabel jSelectGroupDelLabel;
    private javax.swing.JComboBox jSelectGroupUpdComboBox;
    private javax.swing.JLabel jSelectGroupUpdLabel;
    private javax.swing.JComboBox jSelectStudentDelComboBox;
    private javax.swing.JLabel jSelectStudentDelLabel;
    private javax.swing.JComboBox jSelectStudentUpdComboBox;
    private javax.swing.JLabel jSelectStudentUpdLabel;
    private javax.swing.JMenuItem jSerializeModelMenuItem;
    private javax.swing.JButton jUpdateGroupButton;
    private javax.swing.JMenuItem jUpdateGroupMenuItem;
    private javax.swing.JMenu jUpdateMenu;
    private javax.swing.JButton jUpdateStudentButton;
    private javax.swing.JMenuItem jUpdateStudentMenuItem;
    private javax.swing.JMenuBar jViewMenuBar;
    // End of variables declaration//GEN-END:variables
}
